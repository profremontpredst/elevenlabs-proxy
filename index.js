import express from "express";
import cors from "cors";
import fetch from "node-fetch";
import dotenv from "dotenv";
dotenv.config();

const ELEVEN_KEY = process.env.ELEVEN_KEY;
const VOICE_ID   = process.env.ELEVEN_VOICE_ID || "EXAVITQu4vr4xnSDxMaL";
const MODEL_ID   = process.env.ELEVEN_MODEL_ID || "eleven_flash_v2_5";

const app = express();
app.use(cors());
app.use(express.json({ limit: "2mb" }));
app.disable("x-powered-by");

// --- –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ—Ü–∏–∏, –≤—ã–∫–∏–¥—ã–≤–∞–µ–º —Å–º–∞–π–ª—ã/—Ñ–æ—Ä–º—ã/HTML ---
function cleanText(inputRaw = "") {
  let s = String(inputRaw)
    .normalize("NFKC")
    // —É–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–µ–≥–∏ –≤–∏–¥–∞ [openLeadForm], [showCatalog] –∏ —Ç.–ø.
    .replace(/\[(?:openLeadForm|showCatalog|showCombo|confirmPay|showLoading|showThanks|reset)\]/gi, " ")
    // –≤—ã–∫–∏–Ω—É—Ç—å –ª—é–±—ã–µ ¬´–¥—Ä—É–≥–∏–µ¬ª –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç—è—Ç
    .replace(/\[[^\]]{1,50}\]/g, " ")
    // —É–±—Ä–∞—Ç—å HTML
    .replace(/<[^>]*>/g, " ")
    // —É–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤/–ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫)
    .replace(/[\u0000-\u0009\u000B-\u000C\u000E-\u001F\u007F-\u009F\u200B-\u200F\u202A-\u202E\u2060-\u206F]/g, " ")
    // —É–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏)
    .replace(/[\u{1F000}-\u{1FAFF}]/gu, " ")
    .replace(/[\u{1F300}-\u{1F5FF}]/gu, " ")
    .replace(/[\u{1F600}-\u{1F64F}]/gu, " ")
    .replace(/[\u{1F680}-\u{1F6FF}]/gu, " ")
    .replace(/[\u{1F900}-\u{1F9FF}]/gu, " ")
    .replace(/[\u{2600}-\u{27BF}]/gu, " ") // —Ä–∞–∑–Ω–æ–µ/—Å–∏–º–≤–æ–ª—ã
    // —Å–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    .replace(/[ \t]{2,}/g, " ")
    .replace(/\s*([!?‚Ä¶]+)\s*/g, "$1 ")
    .replace(/\s*([,.:-])\s*/g, "$1 ")
    .replace(/\s{2,}/g, " ")
    .trim();

  // –µ—Å–ª–∏ –ø–æ—Å–ª–µ —á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç–æ ‚Äî –ø—É—Å—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ —Å–∫–∞–∂–µ—Ç
  if (!s) s = "–•–æ—Ä–æ—à–æ.";
  // –Ω–µ —Ä–µ–∂–µ–º –ø–æ –¥–ª–∏–Ω–µ ‚Äî ElevenLabs —Å–∞–º —Å–ø—Ä–∞–≤–∏—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —Å–æ–≤—Å–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã –º—É—Å–æ—Ä–∞
  return s;
}

app.get("/", (_req, res) => res.send("‚úÖ ElevenLabs Proxy running"));

/** –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å */
app.post("/stream", async (req, res) => {
  if (!ELEVEN_KEY) return res.status(500).send("No ELEVEN_KEY");
  const text = cleanText(req.body?.text ?? "");
  if (!text) return res.status(400).send("No text provided");
  await proxyTTS(text, res);
});

/** –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—É—Ç—å –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞: POST /say { text } */
app.post("/say", async (req, res) => {
  if (!ELEVEN_KEY) return res.status(500).send("No ELEVEN_KEY");
  const text = cleanText(req.body?.text ?? "");
  if (!text) return res.status(400).send("No text provided");
  await proxyTTS(text, res);
});

/** (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) GET /say?text=... ‚Äî –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ */
app.get("/say", async (req, res) => {
  if (!ELEVEN_KEY) return res.status(500).send("No ELEVEN_KEY");
  const text = cleanText(req.query?.text ?? "");
  if (!text) return res.status(400).send("No text provided");
  await proxyTTS(text, res);
});

async function proxyTTS(text, res) {
  // –≥–æ—Ç–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –∞—É–¥–∏–æ; pipe —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç chunked
  res.statusCode = 200;
  res.setHeader("Content-Type", "audio/mpeg");
  res.setHeader("Cache-Control", "no-store");
  res.setHeader("Connection", "keep-alive");
  if (typeof res.flushHeaders === "function") res.flushHeaders();

  const apiUrl =
    `https://api.elevenlabs.io/v1/text-to-speech/${VOICE_ID}/stream` +
    `?optimize_streaming_latency=3&output_format=mp3_44100_128`;

  try {
    const upstream = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "xi-api-key": ELEVEN_KEY,
        "Content-Type": "application/json",
        "Accept": "audio/mpeg"
      },
      body: JSON.stringify({
        text, // —É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã–π
        model_id: MODEL_ID,
        voice_settings: { stability: 0.5, similarity_boost: 0.5 }
      })
    });

    if (!upstream.ok || !upstream.body) {
      const errTxt = await upstream.text().catch(() => "");
      try { res.setHeader("Content-Type", "application/json; charset=utf-8"); } catch {}
      return res.status(upstream.status || 502).send(errTxt || JSON.stringify({ error: "TTS upstream failed" }));
    }

    // –ø—Ä—è–º–æ–π —Å—Ç—Ä–∏–º ‚Äî –∫–∞–∫ –≤ ¬´—Ä–∞–±–æ—á–µ–º —Å—Ç–∞—Ä–æ–º¬ª
    upstream.body.pipe(res);

    // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ –æ—à–∏–±–∫–µ –∞–ø—Å—Ç—Ä–∏–º–∞
    upstream.body.on?.("error", (e) => {
      console.error("upstream error:", e?.message || e);
      try { res.end(); } catch {}
    });

    // –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª—Å—è ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–ø—Å—Ç—Ä–∏–º
    res.on("close", () => {
      try { upstream.body.cancel?.(); } catch {}
    });
  } catch (e) {
    console.error("proxy error:", e?.message || e);
    if (!res.headersSent) res.status(502).send("Proxy error");
  }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log("üöÄ ElevenLabs proxy on:", PORT));
