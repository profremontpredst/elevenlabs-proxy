import express from "express";
import cors from "cors";
import fetch from "node-fetch";
import dotenv from "dotenv";
dotenv.config();

const ELEVEN_KEY = process.env.ELEVEN_KEY;
const VOICE_ID   = process.env.ELEVEN_VOICE_ID || "EXAVITQu4vr4xnSDxMaL";
const MODEL_ID   = process.env.ELEVEN_MODEL_ID || "eleven_flash_v2_5";

const app = express();
app.use(cors());
app.use(express.json({ limit: "2mb" }));
app.disable("x-powered-by");

app.get("/", (_req, res) => res.send("‚úÖ ElevenLabs Proxy running"));

/** –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–µ–≥–∏/HTML/—ç–º–æ–¥–∑–∏, —ç–º–æ—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º */
function cleanText(raw = "") {
  let s = String(raw)
    .normalize("NFKC")
    .replace(/\[(?:openLeadForm|showCatalog|showCombo|confirmPay|showLoading|showThanks|reset)\]/gi, " ")
    .replace(/\[[^\]]{1,50}\]/g, " ")           // –ª—é–±—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ [—Ç–µ–≥–∏]
    .replace(/<[^>]*>/g, " ")                   // HTML
    .replace(/[\u0000-\u001F\u007F-\u009F]/g, " ") // —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ
    .replace(/[\u{1F000}-\u{1FAFF}\u{2600}-\u{27BF}]/gu, " ") // —ç–º–æ–¥–∑–∏/—Å–∏–º–≤–æ–ª—ã
    .replace(/[ \t]{2,}/g, " ")
    .replace(/\s*([!?‚Ä¶]+)\s*/g, "$1 ")          // —ç–º–æ—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º
    .replace(/\s*([,.:-])\s*/g, "$1 ")
    .replace(/\s{2,}/g, " ")
    .trim();
  if (!s) s = "–•–æ—Ä–æ—à–æ.";
  return s;
}

/** –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—É—Ç—å –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ì–û–¢–û–í–´–ô MP3 —Ü–µ–ª–∏–∫–æ–º */
app.post("/say", async (req, res) => {
  if (!ELEVEN_KEY) return res.status(500).send("No ELEVEN_KEY");
  const text = cleanText(req.body?.text ?? "");
  if (!text) return res.status(400).send("No text provided");

  req.setTimeout(0); // –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Ä–≤—ë–º

  const apiUrl =
    `https://api.elevenlabs.io/v1/text-to-speech/${VOICE_ID}/stream` +
    `?optimize_streaming_latency=3&output_format=mp3_44100_128`;

  try {
    const upstream = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "xi-api-key": ELEVEN_KEY,
        "Content-Type": "application/json",
        "Accept": "audio/mpeg"
      },
      body: JSON.stringify({
        text,
        model_id: MODEL_ID,
        voice_settings: { stability: 0.5, similarity_boost: 0.5 }
      })
    });

    if (!upstream.ok) {
      const err = await upstream.text().catch(() => "");
      return res.status(upstream.status || 502)
        .type("application/json; charset=utf-8")
        .send(err || JSON.stringify({ error: "TTS upstream failed" }));
    }

    // ‚ùó –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –∏ –æ—Ç–¥–∞–µ–º —Ü–µ–ª–∏–∫–æ–º ‚Äî –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    const arr = await upstream.arrayBuffer();
    const buf = Buffer.from(arr);

    res.status(200);
    res.setHeader("Content-Type", "audio/mpeg");
    res.setHeader("Cache-Control", "no-store");
    res.setHeader("Content-Length", String(buf.length));
    return res.end(buf);
  } catch (e) {
    console.error("‚ùå ElevenLabs proxy error:", e?.message || e);
    if (!res.headersSent) return res.status(502).send("Proxy error");
  }
});

/** –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –¥–µ—Ä–≥–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å ‚Äî —Ç–æ–∂–µ –±—É—Ñ–µ—Ä–∏–∑—É–µ–º */
app.post("/stream", async (req, res) => {
  if (!ELEVEN_KEY) return res.status(500).send("No ELEVEN_KEY");
  const text = cleanText(req.body?.text ?? "");
  if (!text) return res.status(400).send("No text provided");

  req.setTimeout(0);

  const apiUrl =
    `https://api.elevenlabs.io/v1/text-to-speech/${VOICE_ID}/stream` +
    `?optimize_streaming_latency=3&output_format=mp3_44100_128`;

  try {
    const upstream = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "xi-api-key": ELEVEN_KEY,
        "Content-Type": "application/json",
        "Accept": "audio/mpeg"
      },
      body: JSON.stringify({
        text,
        model_id: MODEL_ID,
        voice_settings: { stability: 0.5, similarity_boost: 0.5 }
      })
    });

    if (!upstream.ok) {
      const err = await upstream.text().catch(() => "");
      return res.status(upstream.status || 502)
        .type("application/json; charset=utf-8")
        .send(err || JSON.stringify({ error: "TTS upstream failed" }));
    }

    const arr = await upstream.arrayBuffer();
    const buf = Buffer.from(arr);

    res.status(200);
    res.setHeader("Content-Type", "audio/mpeg");
    res.setHeader("Cache-Control", "no-store");
    res.setHeader("Content-Length", String(buf.length));
    return res.end(buf);
  } catch (e) {
    console.error("‚ùå ElevenLabs proxy /stream error:", e?.message || e);
    if (!res.headersSent) return res.status(502).send("Proxy error");
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log("üöÄ ElevenLabs proxy on:", PORT));
